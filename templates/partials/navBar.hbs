{{!-- flatpickr --}}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

{{!-- custome fields selecte container --}}

<div class="custom-field-container d-none">
	<div class="cls-icn d-flex justify-content-end align-items-center">
		<i class="ri-close-line h3 cursor-pointer checkbox-from-close"></i>
	</div>
	<div class="checkbox-wrapper w-100  d-flex gap-3 justify-content-start flex-wrap">
		{{!-- dynamically data is coming --}}

	</div>

</div>


{{!-- pipeline large modal and add field form--}}
<div class="modal  fade bd-example-modal-lg modal_of_pipeline" id="modal-2" tabindex="-1" role="dialog"
	aria-labelledby="myLargeModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="d-flex justify-content-between align-items-center p-3">
				<h5 class="w-100 m-0 ">Pipeline Field Name</h5>
				{{!-- <i class="ri-close-line" style="cursor: pointer;" data-toggle="modal2"
					data-target=".bd-example-modal-lg"></i> --}}
			</div>
			<div class="px-3 pb-2 d-flex gap-4 align-items-center">
				<input class="form-control form-control-sm w-50 add m-0 outline-none pipeline_field_name"
					name="pipeline_field_name" type="text" placeholder="Pipeline Name....">
				<div class="d-flex justify-content-between align-items-center w-50">
					<button type="submit" class="btn btn-md btn-dark pipeline_field_button "
						style="font-size: 14px;">Add Field</button>
					<button type="submit" class="btn btn-md btn-danger pipeline_field_button_submit d-none"
						style="font-size: 14px;">Submit</button>
				</div>
			</div>
			<hr class="my-2 mx-3">
			<div class="appending-pipeline-fields my-2 mx-3">

			</div>

		</div>
	</div>
</div>

{{!-- pipeline small modal--}}
<div class="modal fade bd-example-modal-sm" id="modal" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel"
	aria-hidden="true">
	<div class="modal-dialog modal-sm">
		<div class="modal-content">
			<div class="d-flex justify-content-between align-items-center p-3">
				<h5 class="w-100 m-0 ">Add Pipeline</h5>
				<i class="ri-close-line" id="closeModal" style="cursor: pointer;" data-toggle="modal"
					data-target=".bd-example-modal-sm"></i>
			</div>
			<div class="px-3 pb-3">
				<form id="pipeline_form" class="p-0">
					<input class="form-control form-control-sm  m-0 outline-none" name="pipeline_field" type="text"
						placeholder="Pipeline Name....">
					<button type="submit" class="btn btn-sm btn-dark mt-3">Submit</button>
				</form>
			</div>
		</div>
	</div>
</div>


{{!-- pipeline permission modal --}}

<form class="modal fade permission-modal" id="exampleModalCenter" tabindex="-1" role="dialog"
	aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Pipeline Permission's</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<input type="search" name="username_search" id="username_search"
					class="form-control form-control-sm mx-0 " placeholder="Enter the username">
				<div class="user_contact_div">
					{{!-- dynamically data --}}

				</div>

				<div class="pip_checkbox_container">
					{{!-- dynamically checbox --}}


				</div>
			</div>
			<div class="modal-footer">

				<button type="submit" class="btn btn-primary pipeline-submit">Submit</button>
			</div>
		</div>
	</div>
</form>


{{!-- update form lead data table edit button--}}
<div class="modal fade" id="pipeline-listing-btn" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
	aria-hidden="true">
	<form class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<input type="text" id="editPipelineName" class="form-control " placeholder="Enter the pipeline name"
					required>
			</div>
			<div class="modal-footer">
				<button type="reset" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
				<button type="submit" class="btn btn-primary">Submit</button>
			</div>
		</div>
	</form>
</div>


{{!-- lead update product add form --}}
<!-- Modal -->
<dialog class="update-product-dialog px-3"  id="lead_update_product_form">
            <div class="produc-dialog-close d-flex  justify-content-between my-1 align-items-center ">
              <button type="button" class="btn btn-primary rounded-1 add-product-products-button" style="font-size: 13px;">Add
                Product</button>
              <i class="ri-close-line fs-2 cursor-pointer product-dialog-close" onclick="document.querySelector('#lead_update_product_form').close()"></i>
            </div>
            <div class="border-bottom product-dialog-title my-2 d-flex justify-content-between align-items-center gap-2">
              <p style="width:60%">Product</p>

              <p style="width: 12%">Quantity</p>
              <p style="width: 12%">Price</p>
            </div>
            <div class="update-product-data-holder">



            </div>
            <div class="product-dialog-calculation w-100  pt-3 d-flex justify-content-between align-items-end">
              <button class="button-4 update-product-btn" type="button" role="button">Save</button>
              <div class="gap-4 d-flex align-items-center ">
                <h4 class="m-0 total-amount-container">Total amount
                  <span style="display: inline-block; margin-left: 20px;"></span>
                  <span style="display: inline-block;">â‚¹0</span>
                </h4>
              </div>
            </div>
          </dialog>






<nav class="layout-navbar container-xxl navbar navbar-expand-xl navbar-detached align-items-center bg-navbar-theme"
	id="layout-navbar">

	<div id="chatbox" style="display: none;">
		<div id="friendslist">
			<div id="topmenu">
				<span class="friends"></span>
				<div class="search_div">

					<input type="text" id="searchfield" placeholder="Search contacts..." />
				</div>
			</div>

			<div id="friends">

				<div id="search" style="display: none;">
					<input type="text" id="searchfield" placeholder="Search contacts..." />
				</div>

			</div>

		</div>

		<div id="chatview" class="p1">
			<div class="emoji_container">
				<div class="search">
					<input type="text" class="search__input" placeholder="Type your text">
				</div>
				<div class="emoji-content">
					{{!-- dynamically emoji content --}}

				</div>
			</div>
			<div id="profile">
				<div id="close">
					<div class="cy"></div>
					<div class="cx"></div>
				</div>
				<p>Miro Badev</p>
				<span>miro@badev@gmail.com</span>
			</div>
			<div id="chat-messages">
				<!-- Messages will be displayed here -->
			</div>

			<div id="sendmessage">
				<input type="text" placeholder="Send message..." id="messageInput" />
				<i class="ri-emoji-sticker-line emojiBtn" style="font-size: 13px;margin-top: 25px;"></i>
				<button id="send"></button>
			</div>

		</div>

	</div>






	<div class="layout-menu-toggle navbar-nav align-items-xl-center me-3 me-xl-0 d-xl-none">
		<a class="nav-item nav-link px-0 me-xl-4" href="javascript:void(0)">
			<i class="bx bx-menu bx-sm"></i>
		</a>
	</div>
	{{!-- --}}

	<div class="navbar-nav-right d-flex align-items-center" id="navbar-collapse">
		<!-- Search -->
		<div class="navbar-nav align-items-center">
			<div class="nav-item d-flex align-items-center">

				<input type="search" name="companyNameSearch" autocomplete="off"
					class="border-0 shadow-none ps-1 ps-sm-2 nav-search" placeholder="Search..." aria-label="Search..."
					style="background: none;color:white">
			</div>
		</div>

		<button class="cssbuttons-io-button">

			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="15" height="15">
				<path fill="none" d="M0 0h24v24H0z"></path>
				<path fill="currentColor" d="M11 11V5h2v6h6v2h-6v6h-2v-6H5v-2z"></path>
			</svg>
			<span>Create</span>

		</button>



		<ul class="navbar-nav flex-row align-items-center ms-auto  ">
			<select class="form-select bg-transparent mr-5 outline-none pipeline_select" name="pipeline_field"
				aria-label="Default select example"
				style="border: 1px solid rgb(153, 151, 151) !important;text-transform: capitalize;">


			</select>


			<!-- Place this tag where you want the button to render. -->
			{{!-- <li class="nav-item lh-1 me-3 header">
				<span> <i class="ri-chat-4-line "></i></span>
			</li> --}}



			<li class="nav-item navbar-dropdown dropdown-user dropdown">
				<a class="nav-link dropdown-toggle hide-arrow" href="javascript:void(0);" data-bs-toggle="dropdown">
					<div class="red-dot d-none"></div>
					<i class="ri-notification-line" style="font-size: 20px;"></i>
				</a>
				<ul class="dropdown-menu dropdown-menu-end p-0 schedule-leads" style="min-width: 300px;max-height: 400px;overflow-y:auto">

					{{!-- dynamically data --}}
				</ul>
			</li>


















			<!-- User -->
			<li class="nav-item navbar-dropdown dropdown-user dropdown">

				<a class="nav-link dropdown-toggle hide-arrow" href="javascript:void(0);" data-bs-toggle="dropdown">
					<div class="avatar avatar-online ">
						{{!-- <img src="../assets/img/avatars/1.png" alt="" class="w-px-40 h-auto rounded-circle"> --}}
					</div>
				</a>
				<ul class="dropdown-menu dropdown-menu-end">
					<li>
						<a class="dropdown-item logout" href="#">
							<div class="d-flex">
								<div class="flex-shrink-0 me-3">
									<div class="avatar avatar-online">
										<form id="imageForm" action="/upload" method="post"
											enctype="multipart/form-data">
											<label for="userImage" id="imagePreviewContainer"
												style="width: 40px;height:40px">
												<img id="imagePreview" class="d-none">
											</label>
											<input type="file" id="userImage" name="userImage" style="display: none;">
										</form>

									</div>
								</div>
								<div class="flex-grow-1" id="appendNameGroup">
									{{!-- <span class="fw-medium d-block">John Doe</span>
									<small class="text-muted">Admin</small> --}}
								</div>
							</div>
						</a>
					</li>
					<li>
						<div class="dropdown-divider"></div>
					</li>
					<li>
						<a class="dropdown-item" href="/account">
							<i class="bx bx-user me-2"></i>

							<span class="align-middle">My Profile</span>
						</a>
					</li>

					<li>
						<a class="dropdown-item addFieldBtn cursor-pointer custom_pip" data-toggle="modal"
							data-target="#exampleModal">
							<i class="bx bx-edit me-2"></i>
							<span class="align-middle">Create Pipeline Column</span>
						</a>
					</li>

					<li>

						<a class="dropdown-item cursor-pointer custom_pip" data-toggle="modal"
							data-target=".bd-example-modal-sm">
							<i class="bx bx-customize me-2"></i>
							<span>Custom Pipeline</span>
						</a>
					</li>


					<li>

						<a class="dropdown-item cursor-pointer custom_pip" data-toggle="modal"
							data-target="#exampleModalCenter">
							<i class="bx bx-cog me-2"></i>
							<span>User Pipeline Access</span>
						</a>
					</li>



					<li>
						<div class="dropdown-divider"></div>
					</li>
					<li>
						<a class="dropdown-item  logout-btn" href="/logout">
							<i class="bx bx-power-off me-2"></i>
							<span class="align-middle">Log Out</span>
						</a>
					</li>

				</ul>
			</li>
			<!--/ User -->
		</ul>

		{{!-- cards --}}
		<div class="field-card d-none">
			<i class="ri-close-line fs-3 cursor-pointer" style="padding: 10px 20px;font-size:17px;float: right;"
				onclick="document.querySelector('.field-card').classList.add('d-none');
					document.querySelector('.nav-search').focus();
				"></i>
			<form class="bg-white rounded shadow-5-strong p-4" id="filterForm">
				<!-- Email input -->
				<div class="form-wrap-up">
					<div class="form-outline my-2">
						<label for="">Lead Name</label>
						<input type="text" class="form-control  form-control-sm rounded-0" id="filter_name"
							name="filter_name" placeholder="Lead Name..." />
					</div>
					<div class="form-outline  my-2">
						<label for="">Responsible Person</label>
						<input type="text" class="form-control form-control-sm rounded-0" id="filter_res_person"
							name="filter_res_person" placeholder="Responsible Person..." />
					</div>
					<div class="form-outline my-2 ">
						<label for="">Stage</label>
						<input type="text" class="form-control  form-control-sm rounded-0" id="filter_stage"
							name="filter_stage" placeholder="Stage.." />
					</div>
				</div>
				<small class="mb-2 cursor-pointer d-inline-block font-weight-normal add-cus-btn">Add Custom
					Field</small>
				<!-- Submit button -->
				<div class="d-flex align-items-center gap-4">
					<button type="submit" class="btn rounded-0 btn-primary btn-block d-flex align-items-center gap-3">
						<i class="ri-search-2-line "></i>
						Search</button>
					<button type="reset"
						class="btn border-1 border rounded-0 btn-block d-flex align-items-center gap-3">
						<i class="ri-close-line opacity-100"></i>
						Reset</button>
				</div>

			</form>
		</div>


	</div>
</nav>

<link rel="stylesheet" href="/css/navbar.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script src="/scripts/navbar.js"></script>



<script>

	async function Emoji() {
		const emoji_cnt = document.querySelector('.emoji_container')
		const emojiBtn = document.querySelector('.emojiBtn')
		const searchInput = document.querySelector('#sendmessage > input')
		var increment = true;
		emojiBtn.addEventListener('click', () => {
			if (increment) {
				emoji_cnt.style.display = 'block';
				increment = false
			}
			else {
				emoji_cnt.style.display = 'none';
				increment = true;
			}

		})
		searchInput.addEventListener('keyup', (e) => {
			if (e.key.toLowerCase() === 'enter') {
				emoji_cnt.style.display = 'none';
				increment = true;
			}
		})
		document.querySelector('#send').addEventListener('click', () => {
			emoji_cnt.style.display = 'none';
			increment = true;
		})
	}


	window.onload = async () => {
		const res = await fetch('/emoji.json')
		const data = await res.json()
		appendEmoji(data)
		filterEmoji(data)
	}

	function appendEmoji(data) {
		const emojicnt = document.querySelector('.emoji-content')
		data.forEach(el => {
			const small = document.createElement('small')
			small.classList.add('emoji')
			small.style.cursor = 'pointer'
			small.textContent = el.character
			emojicnt.appendChild(small)
			small.addEventListener('click', (e) => {
				const searchInput = document.querySelector('#sendmessage > input')
				searchInput.value += e.target.textContent
			})
		})
	}

	function filterEmoji(data) {
		const emojiInput = document.querySelector('.search__input')
		emojiInput.addEventListener('input', function (e) {
			const emojicnt = document.querySelector('.emoji-content')
			emojicnt.innerHTML = ''
			const filteredEmojis = data.filter(el => el.subGroup.includes(e.target.value.toLowerCase()))
			appendEmoji(filteredEmojis)
		})
	}
	Emoji()
</script>
<script>
	document.addEventListener("DOMContentLoaded", function () {
		// Add event listener to the image
		document.getElementById("imagePreview").addEventListener("click", function () {
			// Trigger click event on file input
			document.getElementById("userImage").click();
		});

		// Add event listener to file input
		document.getElementById("userImage").addEventListener("change", function () {
			// Automatically submit the form when file is selected
			document.getElementById("imageForm").submit();
		});

		// Add event listener to form submission
		document.getElementById("imageForm").addEventListener("submit", function (event) {
			event.preventDefault(); // Prevent default form submission
			const form = event.target;
			const formData = new FormData(form);

			fetch("/upload", {
				method: "POST",
				body: formData
			})
				.then(response => {
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					return response.json();
				})
				.then(data => {
					if (data.message === "File uploaded successfully") {
						toastr.success(data.message);
						setTimeout(function () {
							location.reload(); // Reload the page after a short delay
						}, 1000); // 1000 milliseconds = 1 second
					} else {
						toastr.error(data.message);
					}
				})
				.catch(error => {
					console.error("Error uploading file:", error);
					toastr.error("Error uploading file. Please try again later.");
				});
		});
	});
</script>


<script>
	function displayUserImage() {
		// Fetch the user details API
		fetch('/usersFetch')
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(user => {
				// Get the container element where the user image will be displayed
				const avatarContainer = document.querySelector('.avatar.avatar-online');

				const imagePreviewContainer = document.getElementById('imagePreviewContainer');
				const nameGroupContainer = document.getElementById('appendNameGroup');

				// Create an <img> element for the user's image
				const img = document.createElement('img');
				img.src = '/userImage/' + user.userImage; // Assuming userImage contains the image file name
				img.onerror = function () {
					img.src = '/images/meetme.png'
				}
				img.alt = ''; // Provide alternative text if necessary
				img.classList.add('rounded-circle');

				// Append the <img> element to the container
				avatarContainer.appendChild(img);

				// Create an <img> element for the user's image preview
				const imgPreview = document.createElement('img');
				imgPreview.style.width = "100%"
				imgPreview.style.height = "100%"
				imgPreview.style.objectFit = "cover"
				imgPreview.onerror = function () {
					imgPreview.src = '/images/meetme.png'
				}
				imgPreview.src = '/userImage/' + user.userImage; // Assuming userImage contains the image file name
				imgPreview.alt = ''; // Provide alternative text if necessary
				imgPreview.classList.add('rounded-circle');

				// Append the <img> element to the preview container
				imagePreviewContainer.appendChild(imgPreview);

				// Create a <span> element for the username
				const usernameSpan = document.createElement('span');
				usernameSpan.classList.add('fw-medium', 'd-block');
				usernameSpan.textContent = user.username; // Assuming 'username' is the property in the API response for username

				// Create a <small> element for the user group
				const userGroupSmall = document.createElement('small');
				userGroupSmall.style.textTransform = "capitalize"
				userGroupSmall.classList.add('text-muted', 'capitalize');
				userGroupSmall.textContent = user.user_group; // Assuming 'userGroup' is the property in the API response for user group

				// Append the <span> and <small> elements to the container
				nameGroupContainer.appendChild(usernameSpan);
				nameGroupContainer.appendChild(userGroupSmall);
			})
			.catch(error => {
				console.error('There was a problem fetching the user details:', error);
			});
	}

	// Add an event listener to call displayUserImage function when the window loads
	window.addEventListener('load', displayUserImage);

</script>




<script>
	const apiUrl = '/userNamesAndEmails';

	fetch(apiUrl)
		.then(response => {
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}
			return response.json();
		})
		.then(users => {
			appendDataToFriendsList(users);
			console.log('Updated Data:', users); // For demonstration, logs the updated data to console
		})
		.catch(error => {
			console.error('Error fetching users:', error);
		});

	function filterData(searchTerm) {
		var friendsList = document.getElementById('friends');
		friendsList.innerHTML = ''; // Clear the current list

		const apiUrl = '/userNamesAndEmails';
		fetch(apiUrl)
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(users => {
				const filteredUsers = users.filter(item => {
					return item.username.toLowerCase().includes(searchTerm);
				});

				appendDataToFriendsList(filteredUsers);
			})
			.catch(error => {
				console.error('Error fetching users:', error);
			});
	}

	// get input data and value
	const searchField = document.getElementById('searchfield');
	searchField.addEventListener('input', (e) => {
		const value = e.target.value.toLowerCase();
		filterData(value)
	})
	function appendDataToFriendsList(data) {
		var friendsList = document.getElementById('friends');
		const searchField = document.getElementById('searchfield').value.toLowerCase();

		// Get the username from session
		const sessionUsername = '{{req.session.username}}';

		// Use map function to transform each object into HTML elements
		var friendElements = data.map(function (entry) {
			var friendDiv = document.createElement('div');
			friendDiv.classList.add('friend');


			var img = document.createElement('img');
			img.src = entry.userImage ? '/userImage/' + entry.userImage : 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/245657/1_copy.jpg';

			var p = document.createElement('p');
			var strong = document.createElement('strong');
			var span = document.createElement('span');

			if (entry.username === sessionUsername) {
				strong.textContent = 'Me';
				img.src = '{{req.session.userImage}}'; // Assuming user image is stored in session
			} else {
				strong.textContent = entry.username;
				span.textContent = entry.email;
				span.style.textTransform = "lowercase"
				// Display email for other users
			}

			p.appendChild(strong);
			p.appendChild(span);

			var statusDiv = document.createElement('div');
			statusDiv.classList.add('status');
			statusDiv.classList.add('available'); // Assuming all friends are available

			friendDiv.appendChild(img);
			friendDiv.appendChild(p);
			friendDiv.appendChild(statusDiv);

			return friendDiv;
		});

		// Append the HTML elements to the friends list
		friendElements.forEach(function (friendElement) {
			friendsList.appendChild(friendElement);
		});
	}

	// Toggle chatbox visibility
	const headerBtn = document.querySelector('.header');
	const chatbox = document.querySelector('#chatbox');
	var flag = true;
	headerBtn.addEventListener('click', () => {
		if (flag) {
			chatbox.style.display = "block";
			flag = false;
		}
		else {
			chatbox.style.display = "none";
			flag = true;
		}
	});
</script>
<script>
	function fetchMessages(toId) {
		var eventSource = new EventSource(`/messages/${toId}/stream`);

		eventSource.onmessage = function (event) {
			var messages = JSON.parse(event.data);
			displayMessages(messages);
			console.log('Received new messages:', messages);
		};

		eventSource.onerror = function (error) {
			console.error('Error with SSE:', error);
		};
	}

	// Function to periodically fetch messages


	async function displayMessages(messages) {
		var chatMessages = document.getElementById('chat-messages');
		var existingMessages = chatMessages.querySelectorAll('.message');

		try {
			// Fetch session email from backend
			const sessionDataResponse = await fetch('/session-email');
			if (!sessionDataResponse.ok) {
				throw new Error('Failed to fetch session data');
			}
			const sessionData = await sessionDataResponse.json();
			const sessionEmail = sessionData.email;

			// Fetch user image for toId
			const toIdUserResponse = await fetch(`/user/${toId}`);
			if (!toIdUserResponse.ok) {
				throw new Error('Failed to fetch user data');
			}
			const toIdUserData = await toIdUserResponse.json();
			const toIdUserImage = toIdUserData.userImage;

			// Remove existing messages without timestamp attribute
			existingMessages.forEach(existingMessage => {
				if (!existingMessage.hasAttribute('data-timestamp')) {
					existingMessage.remove();
				}
			});

			messages.forEach(message => {
				// Check if the message is already displayed
				var isNewMessage = true;
				existingMessages.forEach(existingMessage => {
					if (existingMessage.getAttribute('data-timestamp') === message.createdAt) {
						isNewMessage = false;
					}
				});

				if (isNewMessage) {
					var messageDiv = document.createElement('div');
					messageDiv.classList.add('message');

					// Check if the message is from the current user
					if (message.fromId === sessionEmail) {
						messageDiv.classList.add('right'); // Display on the right side
					} else {
						messageDiv.classList.add('left'); // Display on the left side
					}

					var img = document.createElement('img');
					if (message.fromId === sessionEmail) {
						img.src = `/userImage/${sessionData.userImage}`;
					} else {
						img.src = `/userImage/${toIdUserImage}`;
					}
					var bubbleDiv = document.createElement('div');
					bubbleDiv.classList.add('bubble');
					bubbleDiv.textContent = message.message;

					bubbleDiv.onclick = (item) => {
						fetchInputDiv(item);
					};

					var idinputDiv = document.createElement('input');
					idinputDiv.value = message.id;
					idinputDiv.classList.add("messageId");
					idinputDiv.type = 'hidden';

					var cornerDiv = document.createElement('div');
					cornerDiv.classList.add('corner');

					var span = document.createElement('span');
					// Calculate time difference
					var timeDiff = new Date() - new Date(message.createdAt);
					var seconds = Math.floor(timeDiff / 1000);
					var minutes = Math.floor(seconds / 60);
					var hours = Math.floor(minutes / 60);

					if (seconds < 60) {
						span.textContent = 'Just now';
					} else if (minutes < 60) {
						span.textContent = minutes + ' minutes ago';
					} else if (hours < 24) {
						span.textContent = hours + ' hours ago';
					} else if (hours >= 24 && hours < 48) {
						span.textContent = 'Yesterday';
					} else {
						// Display the date if the message was sent earlier than yesterday
						var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
						span.textContent = new Date(message.createdAt).toLocaleDateString(undefined, options);
					}

					bubbleDiv.appendChild(cornerDiv);
					bubbleDiv.appendChild(span);
					cornerDiv.appendChild(idinputDiv);

					messageDiv.appendChild(img);
					messageDiv.appendChild(bubbleDiv);

					messageDiv.setAttribute('data-timestamp', message.createdAt); // Set timestamp attribute

					chatMessages.appendChild(messageDiv);
					chatMessages.scrollTop = chatMessages.scrollHeight;

				}
			});
		} catch (error) {
			console.error('Error fetching data:', error);
		}
	}

	// Define variables outside the click event handler
	var toId = "";
	var toName = "";

	// When a friend is clicked
	$("#friends").on("click", ".friend", function () {
		var name = $(this).find("p strong").html();
		var email = $(this).find("p span").html();
		$("#profile p").html(name);
		$("#profile span").html(email);

		toId = email;

		// Fetch messages between the two users
		fetchMessages(toId);

		// Handle the chatbox animation
		var childOffset = $(this).offset();
		var parentOffset = $(this).parent().parent().offset();
		var childTop = childOffset.top - parentOffset.top;
		var clone = $(this).find('img').eq(0).clone();
		var top = childTop + 12 + "px";
		$(clone).css({ 'top': top }).addClass("floatingImg").appendTo("#chatbox");

		setTimeout(function () { $("#profile p").addClass("animate"); $("#profile").addClass("animate"); }, 100);
		setTimeout(function () {
			$("#chat-messages").addClass("animate");
			$('.cx, .cy').addClass('s1');
			setTimeout(function () { $('.cx, .cy').addClass('s2'); }, 100);
			setTimeout(function () { $('.cx, .cy').addClass('s3'); }, 200);
		}, 150);

		$('.floatingImg').animate({
			'width': "68px",
			'left': '108px',
			'top': '20px'
		}, 200);

		// Store recipient's email and name in variables
		toName = name;

		// Update recipient's email and name when sending a message
		$("#send").data("toId", toId);
		$("#send").data("toName", toName);

		$(".message").not(".right").find("img").attr("src", $(clone).attr("src"));
		$('#friendslist').fadeOut();
		$('#chatview').fadeIn();
	});

	// Attach event listener for sending a message
	document.getElementById('send').addEventListener('click', function () {
		var messageInput = document.getElementById('sendmessage').querySelector('input[type="text"]');
		var messageText = messageInput.value.trim();
		var toId = $("#send").data("toId");
		var toName = $("#send").data("toName");

		if (messageText !== '') {
			sendMessage(messageText, toId, toName);
			messageInput.value = '';
		}
	});

	$('#close').unbind("click").click(function () {
		$("#chat-messages, #profile, #profile p").removeClass("animate");
		$('.cx, .cy').removeClass("s1 s2 s3");
		$('.floatingImg').animate({
			'width': "40px",
			'top': top,
			'left': '12px'
		}, 200, function () { $('.floatingImg').remove() });

		setTimeout(function () {
			$('#chatview').fadeOut();
			$('#friendslist').fadeIn();
		}, 50);
	});

	// Function to send a message
	function sendMessage(messageText, toId, toName) {
		var chatMessages = document.getElementById('chat-messages');

		// Fetch session data
		fetch('/session-email')
			.then(response => {
				if (!response.ok) {
					throw new Error('Failed to fetch session data');
				}
				return response.json();
			})
			.then(data => {
				// Extract session data
				const sessionImage = data.userImage;
				// Create a new message element
				var messageDiv = document.createElement('div');
				messageDiv.classList.add('message');
				messageDiv.classList.add('right');

				// Create image element for the user's avatar
				var img = document.createElement('img');
				img.src = '/userImage/' + sessionImage; // Assuming sessionImage contains the filename

				// Create div for the message bubble
				var bubbleDiv = document.createElement('div');
				bubbleDiv.classList.add('bubble');

				// Create paragraph element for the message text
				var p = document.createElement('p');
				p.textContent = messageText;

				// Create div for the message corner
				var cornerDiv = document.createElement('div');
				cornerDiv.classList.add('corner');

				// Create span element for the timestamp
				var span = document.createElement('span');
				span.textContent = 'Just now';

				// Append elements to the message bubble
				bubbleDiv.appendChild(p);
				bubbleDiv.appendChild(cornerDiv);
				bubbleDiv.appendChild(span);

				// Append elements to the message div
				messageDiv.appendChild(img);
				messageDiv.appendChild(bubbleDiv);

				// Append the new message to the chat messages container
				chatMessages.appendChild(messageDiv);

				// Scroll to the bottom of the chat messages container
				chatMessages.scrollTop = chatMessages.scrollHeight;

				// Send message data to the server
				fetch('/send', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						toId: toId,
						toName: toName,
						message: messageText
					})
				})
					.then(response => {
						if (!response.ok) {
							throw new Error('Network response was not ok');
						}
						return response.json();
					})
					.then(data => {
						console.log('Message sent:', data);
					})
					.catch(error => {
						console.error('Error sending message:', error);
					});
			})
			.catch(error => {
				console.error('Error fetching session data:', error);
			});
	}


</script>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		// Get reference to the input field
		var messageInput = document.getElementById('messageInput');

		// Add event listener for "keypress" event
		messageInput.addEventListener('keypress', function (event) {
			// Check if Enter key is pressed
			if (event.key === 'Enter') {
				// Prevent default behavior (form submission)
				event.preventDefault();
				// Get message text from input field
				var messageText = messageInput.value.trim();
				// Check if message is not empty
				if (messageText !== '') {
					// Call sendMessage function with message text
					sendMessage(messageText, toId, toName);
					// Clear input field after sending message
					messageInput.value = '';
				}
			}
		});
	});

</script>
<script>
	async function fetchInputDiv(item) {
		const bubblediv = item.target;
		const handleclick = document.querySelector('#sendmessage #send');
		const parentInput = document.querySelector('#sendmessage #messageInput');
		var updatevalue;
		var custominput = document.createElement('input'); // Moved outside event listener
		var uniqueId;
		bubblediv.addEventListener('dblclick', function (e) {
			const delete_icon = document.createElement('i');
			delete_icon.classList.add('ri-delete-bin-line', 'delete_icon');
			updatevalue = bubblediv.childNodes[0].textContent;
			uniqueId = bubblediv.children[0].children[0].value;
			bubblediv.textContent = "";
			custominput.style.outline = "none";
			custominput.style.border = "none";
			custominput.type = 'text';
			custominput.setAttribute('uniqueId', uniqueId);
			custominput.setAttribute('value', updatevalue);
			bubblediv.append(custominput, delete_icon);

			delete_icon.addEventListener('click', async function (e) {
				const uniqueId = custominput.getAttribute('uniqueId');
				const response = await fetch(`/mess_delete/${uniqueId}`, {
					method: 'DELETE'
				});
				const data = await response.json();
				if (data.success) {
					bubblediv.remove(); // Remove the deleted message bubble from the UI
					fetchMessages(toId);
					document.querySelector('#chat-messages').innerHTML = ""
					displayMessages();
				}
			});
		});

		custominput.addEventListener('blur', async function (e) {
			const newValue = e.target.value;
			const uniqueId = e.target.getAttribute('uniqueId');
			const response = await fetch(`/user-message/${uniqueId}`, {
				method: 'PATCH',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({ input_val: newValue })
			});
			const data = await response.json();

			if (data.success) {
				fetchMessages(toId);
				document.querySelector('#chat-messages').innerHTML = ""
				displayMessages(messages);
			}
		});
	}


</script>




<!-- Include Socket.IO client library -->
{{!--
<script src="/socket.io/socket.io.js"></script> --}}
<!-- jQuery and Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<!-- jQuery and Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

{{!-- flatpickr --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.js"
	integrity="sha512-K/oyQtMXpxI4+K0W7H25UopjM8pzq0yrVdFdG21Fh5dBe91I40pDd9A4lzNlHPHBIP2cwZuoxaUSX0GJSObvGA=="
	crossorigin="anonymous" referrerpolicy="no-referrer"></script>

{{!-- xlsx --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/shim.min.js"
	integrity="sha512-nPnkC29R0sikt0ieZaAkk28Ib7Y1Dz7IqePgELH30NnSi1DzG4x+envJAOHz8ZSAveLXAHTR3ai2E9DZUsT8pQ=="
	crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/scripts/client.js"></script>

